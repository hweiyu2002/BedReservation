@page "/reservation"
@inject IJSRuntime JSRuntime

<h3>化療病床預約平台</h3>
<h4>Step 3：預約病床</h4>
<br />

<div class="form-group">
    <label>選擇日期：</label>
    <input type="date" @bind="SelectedDate" min="2023-11-01" />
</div>
<br />

<div class="form-group">
    <label>選擇時段：</label><br />
    <div style="display: flex; flex-wrap: wrap;">
        @for (int i = 0; i < 16; i++)
        {
            int hour = 9 + i / 2;
            int minute = (i % 2) * 30;

            string startTime = $"{hour.ToString().PadLeft(2, '0')}:{minute.ToString().PadLeft(2, '0')}";
            string endTime = $"{(hour + (minute + 30) / 60).ToString().PadLeft(2, '0')}:{((minute + 30) % 60).ToString().PadLeft(2, '0')}";

            <div style="margin-right: 20px;">
                <label>
                    <input type="checkbox" checked="@SelectedTimeSlots[i]" @onchange="() => ToggleTimeSlot(i)" />
                    @($"{startTime} - {endTime}")
                </label>
            </div>
        }
    </div>
</div>
<br />

<div class="form-group">
    <label>選擇病床：</label>
    <select @bind="SelectedBed">
        <option value="A">病床 A</option>
        <option value="B">病床 B</option>
        <option value="C">病床 C</option>
    </select>
</div>
<br />

<button @onclick="ShowConfirmationPopup">確認預約</button>

@code {
    private DateTime SelectedDate { get; set; }
    private bool[] SelectedTimeSlots = new bool[16];
    private string SelectedBed { get; set; }

    private void ToggleTimeSlot(int index)
    {
        if (index >= 0 && index < SelectedTimeSlots.Length)
        {
            SelectedTimeSlots[index] = !SelectedTimeSlots[index];
        }
    }

    private async Task ShowConfirmationPopup()
    {
        DateTime now = DateTime.Now;
        string formattedDate = SelectedDate.ToString("yyyy-MM-dd");
        string selectedTimeSlots = GetSelectedTimeSlots();
        string selectedBed = SelectedBed;

        string message = $"預約成功！\n已於 {now} 預約\n {formattedDate} 時段：{selectedTimeSlots}\n病床：{selectedBed}";

        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private string GetSelectedTimeSlots()
    {
        var selectedSlots = new List<string>();
        bool inSlot = false;
        int startHour = 0;
        int startMinute = 0;

        for (int i = 0; i < SelectedTimeSlots.Length; i++)
        {
            if (SelectedTimeSlots[i])
            {
                if (!inSlot)
                {
                    startHour = 9 + i / 2;
                    startMinute = (i % 2) * 30;
                    inSlot = true;
                }
            }
            else
            {
                if (inSlot)
                {
                    int endHour = startHour + ((startMinute + 30) / 60);
                    int endMinute = (startMinute + 30) % 60;

                    string startTime = $"{startHour.ToString().PadLeft(2, '0')}:{startMinute.ToString().PadLeft(2, '0')}";
                    string endTime = $"{endHour.ToString().PadLeft(2, '0')}:{endMinute.ToString().PadLeft(2, '0')}";

                    selectedSlots.Add($"{startTime} - {endTime}");
                    inSlot = false;
                }
            }
        }

        if (inSlot)
        {
            int endHour = startHour + ((startMinute + 30) / 60);
            int endMinute = (startMinute + 30) % 60;

            string startTime = $"{startHour.ToString().PadLeft(2, '0')}:{startMinute.ToString().PadLeft(2, '0')}";
            string endTime = $"{endHour.ToString().PadLeft(2, '0')}:{endMinute.ToString().PadLeft(2, '0')}";

            selectedSlots.Add($"{startTime} - {endTime}");
        }

        return string.Join(", ", selectedSlots);
    }
}
